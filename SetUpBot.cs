using System;
using System.Data;
using System.Globalization;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Telegram.Bot;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups; 

namespace LocalFunctionProj
{
    public class SetUpBot
    {
        private readonly TelegramBotClient _botClient;

        public SetUpBot()
        {
            _botClient = new TelegramBotClient(System.Environment.GetEnvironmentVariable("TelegramBotToken", EnvironmentVariableTarget.Process));
        }

        private const string SetUpFunctionName = "setup";
        private const string UpdateFunctionName = "handleupdate";

        [Function(SetUpFunctionName)]
        public async Task RunAsync([HttpTrigger(AuthorizationLevel.Anonymous, "get", "post")] HttpRequestData req)
        {
            var handleUpdateFunctionUrl = req.Url.ToString().Replace(SetUpFunctionName, UpdateFunctionName,
                                                ignoreCase: true, culture: CultureInfo.InvariantCulture);
            await _botClient.SetWebhookAsync(handleUpdateFunctionUrl);
        }

        [Function(UpdateFunctionName)]
        public async Task Run([HttpTrigger(AuthorizationLevel.Anonymous, "post")] HttpRequestData req)
        {
            var request = await req.ReadAsStringAsync();
            var update = JsonConvert.DeserializeObject<Telegram.Bot.Types.Update>(request);

            if (update.Type != UpdateType.Message)
                return;
            if (update.Message!.Type != MessageType.Text)
                return;

             if (update.Message.Text.StartsWith("/start"))
            {
                var replyKeyboardMarkup = new ReplyKeyboardMarkup(
                new KeyboardButton[][]
                {
                    new KeyboardButton[]
                    {
                    new KeyboardButton("–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ"),
                     new KeyboardButton("–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"),
                    new KeyboardButton("–Ø–∫ –¥–æ–±—Ä–∞—Ç–∏—Å—å"),
                    },
                    new KeyboardButton[]
                    {
                    new KeyboardButton("–û—Å–≤—ñ—Ç–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏"),
                    new KeyboardButton("–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç"),
                    },
                    new KeyboardButton[]
                    {
                    new KeyboardButton("–ù–∞–∑–∞–¥"),
                    }
                }
                )
                {
                ResizeKeyboard = true
            };
                await _botClient.SendTextMessageAsync(
                    chatId: update.Message.Chat.Id,
                    text: "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                    replyMarkup: replyKeyboardMarkup
                );
            }
            else if (update.Message.Text.Contains("–ù–∞–∑–∞–¥",StringComparison.InvariantCultureIgnoreCase))
            {
            var replyKeyboardRemove = new ReplyKeyboardRemove();
            await _botClient.SendTextMessageAsync(
                chatId: update.Message.Chat.Id,
                 text: "–ö–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ. –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —ó—ó –∑–Ω–æ–≤—É —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.",
                replyMarkup: replyKeyboardRemove
            );
            }
            else
            {
                await _botClient.SendTextMessageAsync(
                    chatId: update.Message.Chat.Id,
                    text: GetBotResponseForInput(update.Message.Text)
                );
            }
        }

        private string GetBotResponseForInput(string text)
        {
            
                if (text.Contains("–°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ", StringComparison.InvariantCultureIgnoreCase))
                 {
                    return "–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ:\n(122) –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏\n(121) –ü—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è";
                }
                if (text.Contains("–Ø–∫ –¥–æ–±—Ä–∞—Ç–∏—Å—å", StringComparison.InvariantCultureIgnoreCase))
                 {
                    return "–≤—É–ª. –ú–∏—Ç—Ä–æ–ø–æ–ª–∏—Ç–∞ –ê–Ω–¥—Ä–µ—è 5, 4-–π –Ω.–∫., –∫—ñ–º. 213";
                }
                if (text.Contains("–û—Å–≤—ñ—Ç–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏", StringComparison.InvariantCultureIgnoreCase))
                 {
                    return "–î–æ—Å—Ç—É–ø–Ω—ñ –æ—Å–≤—ñ—Ç–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏:\n(012) –î–æ—à–∫—ñ–ª—å–Ω–∞ –æ—Å–≤—ñ—Ç–∞\n(013) –ü–æ—á–∞—Ç–∫–æ–≤–∞ –æ—Å–≤—ñ—Ç–∞\n(073) –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç";
                }
                if (text.Contains("–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç", StringComparison.InvariantCultureIgnoreCase))
                 {
                    return "https://lpnu.ua/";
                }
                if (text.Contains("–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–∏–∫–ª–∞–¥–Ω–æ—ó –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", StringComparison.InvariantCultureIgnoreCase))
                 {
                    return "–ü—Ä–∏—Å—É—Ç–Ω—è";
                }
                return $"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –æ–¥–Ω—É —ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ üëÄ";
        }
    }
}
